<?php
class ItemThumb_Plugin extends Pico_View_Admin_Base {
    private $_thumbnailDimensions = array(120,120);


    public function get( Nano_App_Request $request, $config ){
        @list( , , , $action, $item_id ) = $request->pathParts;


        $item = $this->model( 'Item', $item_id );
        unset( $item->appendix->thumbnail );

        $item->store(array('id' => $item_id ));

        if( $action == 'delete' ){
            $this->_clearImageData( $item );
        }

        $url  = $this->_itemUrl( $request, $item );
        $this->response()->redirect($url);
    }

    public function post( Nano_App_Request $request, $config ){
        @list( , , , $action, $item_id ) = $request->pathParts;

        $item = $this->model( 'Item', $item_id );
        $file = (object) $_FILES['image'];
        $url  = $this->_itemUrl( $request, $item );

        if( $file->error ){
            $url->query_form( array('error' => $file->error ));
            $this->response()->redirect($url);
        }
        else{
            $this->_clearImageData( $item );
        }

        if( null !== ($info = Nano_Gd::getInfo( $file->tmp_name ))){
            $image_data = $this->_storeImageData( $item, $file );
        }

        $item->appendix->thumbnail = $image_data->id;
        $item->store(array( 'id' => $item_id ) );
        $this->response()->redirect($url);
    }

    private function _itemUrl( $request, $item ){
        $url = $request->url;
        $url->pathParts( array('admin', $item->type, 'edit', $item->id ) );
        return $url;
    }

    private function _clearImageData( $item ){
        $this->model('ImageData')->delete( array('image_id' => $item->id ));
    }


    private function _storeImageData( $item, $file ){
        list( $width, $height ) = $this->_thumbnailDimensions;
        $gd  = new Nano_Gd( $file->tmp_name );
        $gd  = $gd->resize( null, $width )->crop( $width, $height );

        $data  = $gd->getImageJPEG();

        $image_data = $this->model('ImageData', array(
            'image_id'  => $item->id,
            'size'      => strlen($data),
            'mime'      => 'image/jpeg',
            'width'     => $width,
            'height'    => $height,
            'data'      => $data,
            'filename'  => $file->name,
            'type'      => 'original'
        ));

        $image_data->store();

        return $image_data;
    }

}
